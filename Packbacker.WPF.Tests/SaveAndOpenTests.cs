using Microsoft.Extensions.DependencyInjection;
using Packbacker.Domain.Abstractions;
using Packbacker.Domain.Services;
using Packbacker.Domain.Units;
using Packbacker.ViewModels;
using Packbacker.ViewModels.Units;
using Packbacker.WPF.Tests.Infrastructure;
using System.IO.Abstractions;
using System.IO.Abstractions.TestingHelpers;
using Xunit;

namespace Packbacker.WPF.Tests
{
    public class SaveAndOpenTests
    {
        const string TestDirectory = "test/";

        readonly string filePath;

        readonly IServiceProvider services;

        public SaveAndOpenTests()
        {
            filePath = Path.Combine(TestDirectory, "example file.pack");

            ServiceCollection serviceCollection = ServiceConfiguration.ConfigureDefault();
            MockFileSystem mockFileSystem = new(new Dictionary<string, MockFileData>()
            {
                // FileItemStore should just create this with OpenOrCreate, but doesn't for some reason
                { Path.Combine(TestDirectory, "ItemCatalog"), new MockFileData(string.Empty) }
            });

            TestSaveFileService testSaveFileService = new(mockFileSystem, filePath);

            serviceCollection.AddSingleton<IFileSystem>(_ => mockFileSystem);
            serviceCollection.AddTransient<ISaveFileService>(s =>
            {
                return new TestSaveFileService(s.GetRequiredService<IFileSystem>(), filePath);
            });

            serviceCollection.AddTransient<IOpenFileService>(s =>
            {
                return new TestOpenFileService(s.GetRequiredService<IFileSystem>(), filePath);
            });

            serviceCollection.AddSingleton<IItemStore>(s =>
            {
                return new FileItemStore(s.GetRequiredService<IFileSystem>(), TestDirectory);
            });

            services = serviceCollection.BuildServiceProvider();
        }

        [Fact]
        public async Task AddItem_SaveFile_DeleteItem_OpenSavedFile()
        {
            MainWindowViewModel mainWindow = services.GetRequiredService<MainWindowViewModel>();

            GearEditorViewModel gearEditor = mainWindow.GearEditorViewModel;

            // Enter information for item to add
            gearEditor.AddItemName = "Osprey Levity 45L";
            gearEditor.AddItemWeight = "800";
            gearEditor.SelectedWeightUnit = new WeightUnitViewModel(WeightUnit.Grams);

            // Hit the add button
            await mainWindow.GearEditorViewModel.AddAsync();

            // Save the file
            await mainWindow.SaveAsync();

            IFileSystem fileSystem = services.GetRequiredService<IFileSystem>();

            Assert.True(fileSystem.File.Exists(filePath));

            ItemViewModel itemToDelete = gearEditor.GearListViewModel.Items.First();

            itemToDelete.Delete();

            await mainWindow.OpenAsync();

            ItemViewModel itemAfterOpeningSavedFile = gearEditor.GearListViewModel.Items.First();

            Assert.Equal("Osprey Levity 45L", itemAfterOpeningSavedFile.Name);
            Assert.Equal("800g", itemAfterOpeningSavedFile.Weight);
        }
    }
}
